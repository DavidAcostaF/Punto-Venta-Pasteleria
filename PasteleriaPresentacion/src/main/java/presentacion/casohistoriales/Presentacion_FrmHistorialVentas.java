/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion.casohistoriales;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.fonts.roboto.FlatRobotoFont;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.mycompany.pasteleriaconsultarventas.FuncionalidadConsultarVentas;
import com.mycompany.pasteleriaconsultarventas.IFuncionalidadConsultarVentas;
import com.mycompany.pasteleriagenerarreporte.FuncionalidadGenerarReporte;
import com.mycompany.pasteleriagenerarreporte.IFuncionalidadGenerarReporte;
import com.mycompany.pasteleriaproductosventa.FuncionalidadConsultarProductos;
import consultarClientes.FuncionalidadConsultarClientes;
import consultarClientes.IFuncionalidadConsultarClientes;
import control.ControlHistoriales;
import dto.DTO_Cliente;
import dto.DTO_DetalleVenta;
import dto.DTO_GenerarReporte;
import dto.DTO_Producto;
import dto.DTO_ReporteVentasFormato;
import dto.DTO_Venta;
import extras.ClientesComboBoxModel;
import extras.PastelComboBoxModel;
import extras.VentasTableModel;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import com.mycompany.pasteleriaproductosventa.IFuncionalidadConsultarProductos;
import javax.swing.JOptionPane;

/**
 *
 * @author abelc
 */
public class Presentacion_FrmHistorialVentas extends javax.swing.JFrame {

    private ControlHistoriales control;
    private DTO_Cliente cliente;
    private IFuncionalidadConsultarClientes funcionalidadesClientes;
    private List<DTO_Cliente> listaClientes;
    private List<DTO_Producto> listaProductos;
    private List<DTO_Producto> listaProductosSeleccionados;
    private IFuncionalidadConsultarProductos funcionalidadConsultarProductos;
    private IFuncionalidadConsultarVentas funcionalidadConsultarVentas;
    private IFuncionalidadGenerarReporte funcionalidadGenerarReporte;
    private DTO_Venta venta;

    /**
     * Creates new form FrmHistorialVentas
     */
    public Presentacion_FrmHistorialVentas() {
        this.control = ControlHistoriales.getInstance();
        this.funcionalidadConsultarVentas = new FuncionalidadConsultarVentas();
        this.funcionalidadesClientes = new FuncionalidadConsultarClientes();
        this.funcionalidadConsultarProductos = new FuncionalidadConsultarProductos();
        this.funcionalidadGenerarReporte=new FuncionalidadGenerarReporte();
        this.funcionalidadConsultarProductos = new FuncionalidadConsultarProductos();
        this.funcionalidadGenerarReporte = new FuncionalidadGenerarReporte();
        this.cliente = new DTO_Cliente();
        this.venta = new DTO_Venta();
        this.listaProductosSeleccionados = new ArrayList<>();
        listaClientes = funcionalidadesClientes.consultarClientes();
        listaProductos = funcionalidadConsultarProductos.consultarProductos();
        initComponents();
        setTitle("Historial de ventas");
        panelProductos.setVisible(false);
        llenarTabla();
        FlatRobotoFont.install();
        FlatLaf.registerCustomDefaultsSource("extras");
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));
        FlatMacDarkLaf.setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filtrarClienteRadioBtn = new javax.swing.JRadioButton();
        filtrarPorProductosRadioBtn = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        desdeDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        hastaDatePicker = new com.github.lgooddatepicker.components.DatePicker();
        productosComboBox = new extras.ComboBoxMultiSeleccion();
        aplicarFiltroBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        detallesVentaBtn = new javax.swing.JButton();
        regresarBtn = new javax.swing.JButton();
        generarReporteEvnt = new javax.swing.JLabel();
        clientesComboBox = new javax.swing.JComboBox<>();
        restablecerBtn = new javax.swing.JButton();
        panelProductos = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(232, 232, 232));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setText("Historial de ventas");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));

        filtrarClienteRadioBtn.setText("Filtrar por clientes");
        filtrarClienteRadioBtn.setForeground(new java.awt.Color(0, 0, 0));
        filtrarClienteRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarClienteRadioBtnActionPerformed(evt);
            }
        });

        filtrarPorProductosRadioBtn.setText("Filtar Por Productos");
        filtrarPorProductosRadioBtn.setForeground(new java.awt.Color(0, 0, 0));
        filtrarPorProductosRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarPorProductosRadioBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Filtrar por periodo");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));

        jLabel3.setText("Desde:");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));

        jLabel4.setText("Hasta:");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));

        productosComboBox.setModel((new PastelComboBoxModel(listaProductos)));
        productosComboBox.setEnabled(false);
        productosComboBox.setForeground(new java.awt.Color(255, 255, 255));

        aplicarFiltroBtn.setText("Aplicar filtros");
        aplicarFiltroBtn.setBackground(new java.awt.Color(140, 220, 254));
        aplicarFiltroBtn.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        aplicarFiltroBtn.setForeground(new java.awt.Color(0, 0, 0));
        aplicarFiltroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarFiltroBtnActionPerformed(evt);
            }
        });

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Fecha de compra", "Fecha de entrega", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaVentas.setForeground(new java.awt.Color(0, 0, 0));
        tablaVentas.setSelectionBackground(new java.awt.Color(140, 220, 254));
        tablaVentas.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablaVentas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaVentas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tablaVentas);

        detallesVentaBtn.setText("Ver detalles de la venta");
        detallesVentaBtn.setBackground(new java.awt.Color(140, 220, 254));
        detallesVentaBtn.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        detallesVentaBtn.setForeground(new java.awt.Color(0, 0, 0));
        detallesVentaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detallesVentaBtnActionPerformed(evt);
            }
        });

        regresarBtn.setText("Regresar");
        regresarBtn.setBackground(new java.awt.Color(140, 220, 254));
        regresarBtn.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        regresarBtn.setForeground(new java.awt.Color(0, 0, 0));
        regresarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarBtnActionPerformed(evt);
            }
        });

        generarReporteEvnt.setText("Generar Reporte de las ventas");
        generarReporteEvnt.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        generarReporteEvnt.setForeground(new java.awt.Color(0, 102, 255));
        generarReporteEvnt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                generarReporteEvntMousePressed(evt);
            }
        });

        clientesComboBox.setModel(new ClientesComboBoxModel(listaClientes));
        clientesComboBox.setEnabled(false);

        restablecerBtn.setText("Restablecer");
        restablecerBtn.setBackground(new java.awt.Color(140, 220, 254));
        restablecerBtn.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        restablecerBtn.setForeground(new java.awt.Color(0, 0, 0));
        restablecerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restablecerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filtrarClienteRadioBtn)
                                    .addComponent(filtrarPorProductosRadioBtn))
                                .addGap(43, 43, 43)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(productosComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                                    .addComponent(clientesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(regresarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(163, 163, 163)
                                .addComponent(generarReporteEvnt))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(253, 253, 253)
                                .addComponent(aplicarFiltroBtn)
                                .addGap(151, 151, 151)
                                .addComponent(restablecerBtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(78, 78, 78)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3))
                            .addGap(138, 138, 138))
                        .addComponent(desdeDatePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hastaDatePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(46, 46, 46))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelProductos)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(detallesVentaBtn)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filtrarClienteRadioBtn)
                            .addComponent(clientesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desdeDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filtrarPorProductosRadioBtn)
                            .addComponent(productosComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hastaDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aplicarFiltroBtn)
                    .addComponent(restablecerBtn))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelProductos)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(detallesVentaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regresarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generarReporteEvnt))
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void filtrarClienteRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarClienteRadioBtnActionPerformed
        if (filtrarClienteRadioBtn.isSelected()) {
            clientesComboBox.setEnabled(true);
        } else {
            clientesComboBox.setEnabled(false);
            clientesComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_filtrarClienteRadioBtnActionPerformed

    private void filtrarPorProductosRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarPorProductosRadioBtnActionPerformed
        if (filtrarPorProductosRadioBtn.isSelected()) {
            productosComboBox.setEnabled(true);
        } else {
            productosComboBox.limpiarElementosSeleccionados();
            productosComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_filtrarPorProductosRadioBtnActionPerformed

    private void regresarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarBtnActionPerformed
        this.dispose();
        control.mostrarMenu();
    }//GEN-LAST:event_regresarBtnActionPerformed

    private void detallesVentaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detallesVentaBtnActionPerformed
     obtenerDatosFilaSeleccionada();
    if (venta == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una venta.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return; 
    }
    venta = funcionalidadConsultarVentas.encontrarVenta(venta.getID());
    control.setVenta(venta);
    this.dispose();
    control.mostrarDetallesVenta();
    }//GEN-LAST:event_detallesVentaBtnActionPerformed

    private void aplicarFiltroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarFiltroBtnActionPerformed
        if (filtrarClienteRadioBtn.isSelected() && !filtrarPorProductosRadioBtn.isSelected()
                && hastaDatePicker.getDate() == null && desdeDatePicker.getDate() == null
                && !clientesComboBox.getSelectedItem().equals("Todos")) {
            panelProductos.setVisible(false);
            obtenerCliente();
            List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.ventasPorCliente(cliente.getID());
            tablaVentas(listaVentas);
        }
        if (!filtrarClienteRadioBtn.isSelected() && filtrarPorProductosRadioBtn.isSelected()
                && hastaDatePicker.getDate() == null && desdeDatePicker.getDate() == null) {
            obtenerProductos();
            List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.consultarVentasPorProductos(listaProductosSeleccionados);
            Map<DTO_Producto, Integer> cantidadPorProducto = calcularCantidadPorProducto(listaVentas, listaProductosSeleccionados);
            JPanel panelLabels = new JPanel();
            panelLabels.setLayout(new BoxLayout(panelLabels, BoxLayout.Y_AXIS));
            for (Map.Entry<DTO_Producto, Integer> entry : cantidadPorProducto.entrySet()) {
                DTO_Producto producto = entry.getKey();
                int cantidad = entry.getValue();
                JLabel labelProducto = new JLabel(producto.getNombre() + ": " + cantidad);
                labelProducto.setForeground(Color.BLACK);
                panelLabels.add(labelProducto);
            }
            panelLabels.setBackground(Color.WHITE);
            panelProductos.setBackground(Color.WHITE);
            panelProductos.setVisible(true);
            panelProductos.setViewportView(panelLabels);
            tablaVentas(listaVentas);
        }
        if (!filtrarClienteRadioBtn.isSelected() && !filtrarPorProductosRadioBtn.isSelected()
                && hastaDatePicker.getDate() != null && desdeDatePicker.getDate() != null) {
            panelProductos.setVisible(false);
            LocalDate localDateInicio = desdeDatePicker.getDate();
            Instant instantInicio = localDateInicio.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaInicio = Date.from(instantInicio);
            LocalDate localDateFin = hastaDatePicker.getDate();
            Instant instantFin = localDateFin.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaFin = Date.from(instantFin);
            Calendar calFin = Calendar.getInstance();
            calFin.setTime(fechaFin);
            calFin.set(Calendar.HOUR_OF_DAY, 23);
            calFin.set(Calendar.MINUTE, 59);
            calFin.set(Calendar.SECOND, 59);
            fechaFin = calFin.getTime();
            List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.consultarVentasPorRangoFechas(fechaInicio, fechaFin);
            tablaVentas(listaVentas);
        }
        if (filtrarClienteRadioBtn.isSelected() && filtrarPorProductosRadioBtn.isSelected()
                && hastaDatePicker.getDate() == null && desdeDatePicker.getDate() == null) {
            obtenerCliente();
            obtenerProductos();
            List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.consultarVentasConFiltros(cliente.getID(), null, null, listaProductosSeleccionados);
            JPanel panelLabels = new JPanel();
            panelLabels.setLayout(new BoxLayout(panelLabels, BoxLayout.Y_AXIS));
            Map<DTO_Producto, Integer> cantidadPorProducto = calcularCantidadPorProducto(listaVentas, listaProductosSeleccionados);
            for (Map.Entry<DTO_Producto, Integer> entry : cantidadPorProducto.entrySet()) {
                DTO_Producto producto = entry.getKey();
                int cantidad = entry.getValue();
                JLabel labelProducto = new JLabel(producto.getNombre() + ": " + cantidad);
                labelProducto.setForeground(Color.BLACK);
                panelLabels.add(labelProducto);
            }
            panelLabels.setBackground(Color.WHITE);
            panelProductos.setBackground(Color.WHITE);
            panelProductos.setVisible(true);
            panelProductos.setViewportView(panelLabels);

            tablaVentas(listaVentas);
        }
        if (filtrarClienteRadioBtn.isSelected() && !filtrarPorProductosRadioBtn.isSelected()
                && hastaDatePicker.getDate() != null && desdeDatePicker.getDate() != null) {
            panelProductos.setVisible(false);
            obtenerCliente();
            LocalDate localDateInicio = desdeDatePicker.getDate();
            Instant instantInicio = localDateInicio.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaInicio = Date.from(instantInicio);
            LocalDate localDateFin = hastaDatePicker.getDate();
            Instant instantFin = localDateFin.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaFin = Date.from(instantFin);
            Calendar calFin = Calendar.getInstance();
            calFin.setTime(fechaFin);
            calFin.set(Calendar.HOUR_OF_DAY, 23);
            calFin.set(Calendar.MINUTE, 59);
            calFin.set(Calendar.SECOND, 59);
            fechaFin = calFin.getTime();
            List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.consultarVentasConFiltros(cliente.getID(), fechaInicio, fechaFin, null);
            tablaVentas(listaVentas);
        }
        if (!filtrarClienteRadioBtn.isSelected() && filtrarPorProductosRadioBtn.isSelected()
                && hastaDatePicker.getDate() != null && desdeDatePicker.getDate() != null) {
            obtenerProductos();
            LocalDate localDateInicio = desdeDatePicker.getDate();
            Instant instantInicio = localDateInicio.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaInicio = Date.from(instantInicio);
            LocalDate localDateFin = hastaDatePicker.getDate();
            Instant instantFin = localDateFin.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaFin = Date.from(instantFin);
            Calendar calFin = Calendar.getInstance();
            calFin.setTime(fechaFin);
            calFin.set(Calendar.HOUR_OF_DAY, 23);
            calFin.set(Calendar.MINUTE, 59);
            calFin.set(Calendar.SECOND, 59);
            fechaFin = calFin.getTime();
            List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.consultarVentasConFiltros(null, fechaInicio, fechaFin, listaProductos);
            JPanel panelLabels = new JPanel();
            panelLabels.setLayout(new BoxLayout(panelLabels, BoxLayout.Y_AXIS));
            Map<DTO_Producto, Integer> cantidadPorProducto = calcularCantidadPorProducto(listaVentas, listaProductosSeleccionados);
            for (Map.Entry<DTO_Producto, Integer> entry : cantidadPorProducto.entrySet()) {
                DTO_Producto producto = entry.getKey();
                int cantidad = entry.getValue();
                JLabel labelProducto = new JLabel(producto.getNombre() + ": " + cantidad);
                labelProducto.setForeground(Color.BLACK);
                panelLabels.add(labelProducto);
            }
            panelLabels.setBackground(Color.WHITE);
            panelProductos.setBackground(Color.WHITE);
            panelProductos.setVisible(true);
            panelProductos.setViewportView(panelLabels);
            tablaVentas(listaVentas);
        }
        if (filtrarClienteRadioBtn.isSelected() && filtrarPorProductosRadioBtn.isSelected()
                && hastaDatePicker.getDate() != null && desdeDatePicker.getDate() != null) {
            obtenerCliente();
            obtenerProductos();
            LocalDate localDateInicio = desdeDatePicker.getDate();
            Instant instantInicio = localDateInicio.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaInicio = Date.from(instantInicio);
            LocalDate localDateFin = hastaDatePicker.getDate();
            Instant instantFin = localDateFin.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant();
            Date fechaFin = Date.from(instantFin);
            Calendar calFin = Calendar.getInstance();
            calFin.setTime(fechaFin);
            calFin.set(Calendar.HOUR_OF_DAY, 23);
            calFin.set(Calendar.MINUTE, 59);
            calFin.set(Calendar.SECOND, 59);
            fechaFin = calFin.getTime();
            List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.consultarVentasConFiltros(cliente.getID(), fechaInicio, fechaFin, listaProductos);
            JPanel panelLabels = new JPanel();
            panelLabels.setLayout(new BoxLayout(panelLabels, BoxLayout.Y_AXIS));
            Map<DTO_Producto, Integer> cantidadPorProducto = calcularCantidadPorProducto(listaVentas, listaProductosSeleccionados);
            for (Map.Entry<DTO_Producto, Integer> entry : cantidadPorProducto.entrySet()) {
                DTO_Producto producto = entry.getKey();
                int cantidad = entry.getValue();
                JLabel labelProducto = new JLabel(producto.getNombre() + ": " + cantidad);
                labelProducto.setForeground(Color.BLACK);
                panelLabels.add(labelProducto);
            }
            panelLabels.setBackground(Color.WHITE);
            panelProductos.setBackground(Color.WHITE);
            panelProductos.setVisible(true);
            panelProductos.setViewportView(panelLabels);
            tablaVentas(listaVentas);
        }
    }//GEN-LAST:event_aplicarFiltroBtnActionPerformed
    private Map<DTO_Producto, Integer> calcularCantidadPorProducto(List<DTO_Venta> listaVentas, List<DTO_Producto> listaProductosSeleccionados) {
        Map<DTO_Producto, Integer> cantidadPorProducto = new HashMap<>();

        for (DTO_Producto productoSeleccionado : listaProductosSeleccionados) {
            cantidadPorProducto.put(productoSeleccionado, 0);
        }

        for (DTO_Venta venta : listaVentas) {
            for (DTO_DetalleVenta detalleVenta : venta.getDetallesVenta()) {
                String idProductoVendido = detalleVenta.getIdproducto();
                for (DTO_Producto productoSeleccionado : listaProductosSeleccionados) {
                    String idProductoSeleccionado = productoSeleccionado.getId();

                    if (idProductoVendido.equals(idProductoSeleccionado)) {
                        int cantidadAnterior = cantidadPorProducto.get(productoSeleccionado);
                        int cantidadActualizada = cantidadAnterior + detalleVenta.getCantidad();
                        cantidadPorProducto.put(productoSeleccionado, cantidadActualizada);
                    }
                }
            }
        }
        return cantidadPorProducto;
    }
    private void restablecerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restablecerBtnActionPerformed
        filtrarClienteRadioBtn.setSelected(false);
        filtrarPorProductosRadioBtn.setSelected(false);
        clientesComboBox.setSelectedItem("Todos");
        desdeDatePicker.setDate(null);
        hastaDatePicker.setDate(null);
        productosComboBox.setEnabled(false);
        clientesComboBox.setEnabled(false);
        productosComboBox.limpiarElementosSeleccionados();
        llenarTabla();
    }//GEN-LAST:event_restablecerBtnActionPerformed

    private void generarReporteEvntMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generarReporteEvntMousePressed
        try {
            VentasTableModel modelo = (VentasTableModel) tablaVentas.getModel();
            List<DTO_Venta> ventas = modelo.getAllVentas();
            List<DTO_ReporteVentasFormato> reporteVentas = new ArrayList<>();
            SimpleDateFormat ff = new SimpleDateFormat("dd/MM/yyyy");
            for (DTO_Venta venta : ventas) {
                DTO_ReporteVentasFormato r = new DTO_ReporteVentasFormato();
                r.setFechaEntrega(ff.format(venta.getFechaEntrega()));
                r.setFechaCompra(ff.format(venta.getFechaRegistro()));
                r.setEstado(venta.getEstado());
                r.setTotal(Float.toString(venta.getMontoTotal()));
                reporteVentas.add(r);
                r.getEstado();
            }
            System.out.println(reporteVentas);
            DTO_GenerarReporte reporteGenerado = funcionalidadGenerarReporte.generarReporteVentasCasoHistoriales(reporteVentas);
            JasperPrint jasperPrint = JasperFillManager.fillReport(reporteGenerado.getJasperReport(), reporteGenerado.getParameters(), new JREmptyDataSource());

            JasperViewer.viewReport(jasperPrint, false);
        } catch (JRException ex) {
            Logger.getLogger(Presentacion_FrmHistorialVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generarReporteEvntMousePressed

    public void tablaVentas(List<DTO_Venta> listaVentas) {
        limpiarTabla();

        VentasTableModel modelo = new VentasTableModel(listaVentas);
        tablaVentas.setModel(modelo);

    }

    public void obtenerProductos() {
        listaProductosSeleccionados.clear();
        List<String> productosSeleccionados = productosComboBox.obtenerElementosSeleccionados();
        if (!productosSeleccionados.isEmpty()) {
            productosSeleccionados.forEach(nombreProducto -> {
                DTO_Producto producto = funcionalidadConsultarProductos.consultarProductoPorNombre(nombreProducto);
                System.out.println(producto.getId());
                System.out.println(producto.getNombre());
                listaProductosSeleccionados.add(producto);

            });
        }

    }

    public void obtenerCliente() {
        String clienteSeleccionado = (String) clientesComboBox.getSelectedItem();
        if (clienteSeleccionado != null) {
            // Dividir el texto en partes usando el guion como separador
            String[] partes = clienteSeleccionado.split("-");

            if (partes.length >= 2) {
                // El último elemento del array es el número de teléfono
                String numeroTelefono = partes[partes.length - 1].trim();

                // Extraer el nombre y apellidos
                String nombreCompleto = partes[0].trim();
                String[] nombresApellidos = nombreCompleto.split("\\s+");

                String nombre = nombresApellidos[0];
                String apellidoPaterno = "";
                String apellidoMaterno = "";

                if (nombresApellidos.length >= 3) {
                    // Hay dos nombres y apellidos
                    apellidoPaterno = nombresApellidos[1];
                    apellidoMaterno = nombresApellidos[2];
                } else if (nombresApellidos.length == 2) {
                    // Solo hay un nombre y apellidos
                    String[] apellidos = nombresApellidos[1].split(" ");
                    if (apellidos.length >= 2) {
                        apellidoPaterno = apellidos[0];
                        apellidoMaterno = apellidos[1];
                    } else {
                        apellidoPaterno = apellidos[0];
                    }

                }

                cliente = funcionalidadesClientes.encontrarCliente(apellidoPaterno, apellidoMaterno, nombre, numeroTelefono);
            }
        }
    }

    public void llenarTabla() {
        limpiarTabla();
        List<DTO_Venta> listaVentas = funcionalidadConsultarVentas.consultarVentas();
        if (listaVentas != null) {
            VentasTableModel modelo = new VentasTableModel(listaVentas);
            tablaVentas.setModel(modelo);
        }
    }

    private void limpiarTabla() {
        TableModel modelo = tablaVentas.getModel();
        if (modelo instanceof VentasTableModel) {
            ((VentasTableModel) modelo).limpiarTabla();
        }
    }

    private void obtenerDatosFilaSeleccionada() {
        int filaSeleccionada = tablaVentas.getSelectedRow();
        if (filaSeleccionada != -1) {
            venta = ((VentasTableModel) tablaVentas.getModel()).getVentaAt(filaSeleccionada);

        }
    }

    public void mostrarHistorialVentas() {
        FlatRobotoFont.install();
        FlatLaf.registerCustomDefaultsSource("extras");
        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));
        FlatLightLaf.setup();

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Presentacion_FrmHistorialVentas().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aplicarFiltroBtn;
    private javax.swing.JComboBox<String> clientesComboBox;
    private com.github.lgooddatepicker.components.DatePicker desdeDatePicker;
    private javax.swing.JButton detallesVentaBtn;
    private javax.swing.JRadioButton filtrarClienteRadioBtn;
    private javax.swing.JRadioButton filtrarPorProductosRadioBtn;
    private javax.swing.JLabel generarReporteEvnt;
    private com.github.lgooddatepicker.components.DatePicker hastaDatePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane panelProductos;
    private extras.ComboBoxMultiSeleccion productosComboBox;
    private javax.swing.JButton regresarBtn;
    private javax.swing.JButton restablecerBtn;
    private javax.swing.JTable tablaVentas;
    // End of variables declaration//GEN-END:variables
}
